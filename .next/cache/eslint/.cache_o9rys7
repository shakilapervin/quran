[{"H:\\node\\quran\\pages\\admin\\dashboard.js":"1","H:\\node\\quran\\pages\\admin\\dua\\add-new.js":"2","H:\\node\\quran\\pages\\admin\\dua\\index.js":"3","H:\\node\\quran\\pages\\admin\\dua\\[id]\\index.js":"4","H:\\node\\quran\\pages\\admin\\index.js":"5","H:\\node\\quran\\pages\\admin\\sura\\add-new.js":"6","H:\\node\\quran\\pages\\admin\\sura\\index.js":"7","H:\\node\\quran\\pages\\admin\\sura\\[id]\\chapter\\add-new.js":"8","H:\\node\\quran\\pages\\admin\\sura\\[id]\\chapter\\index.js":"9","H:\\node\\quran\\pages\\admin\\sura\\[id]\\chapter\\[chapter].js":"10","H:\\node\\quran\\pages\\admin\\sura\\[id]\\index.js":"11","H:\\node\\quran\\pages\\api\\auth\\login.js":"12","H:\\node\\quran\\pages\\api\\auth\\logout.js":"13","H:\\node\\quran\\pages\\coming-soon.js":"14","H:\\node\\quran\\pages\\index.js":"15","H:\\node\\quran\\pages\\main.js":"16","H:\\node\\quran\\pages\\search.js":"17","H:\\node\\quran\\pages\\sura.js":"18","H:\\node\\quran\\pages\\_app.js":"19","H:\\node\\quran\\pages\\_document.js":"20","H:\\node\\quran\\components\\admin\\layouts\\Layout.js":"21","H:\\node\\quran\\components\\admin\\layouts\\Sidebar.js":"22","H:\\node\\quran\\components\\CustomImage.js":"23","H:\\node\\quran\\components\\frontend\\layouts\\Footer.js":"24","H:\\node\\quran\\components\\frontend\\layouts\\FrontLayout.js":"25","H:\\node\\quran\\components\\frontend\\layouts\\Header.js":"26","H:\\node\\quran\\components\\frontend\\layouts\\Page.js":"27","H:\\node\\quran\\components\\frontend\\SearchByDua.js":"28","H:\\node\\quran\\components\\frontend\\SearchBySura.js":"29","H:\\node\\quran\\components\\frontend\\SearchByText.js":"30","H:\\node\\quran\\components\\Loader.js":"31","H:\\node\\quran\\components\\TableSkeleton.js":"32","H:\\node\\quran\\pages\\dua.js":"33"},{"size":2184,"mtime":1658222707070,"results":"34","hashOfConfig":"35"},{"size":7331,"mtime":1658638825640,"results":"36","hashOfConfig":"35"},{"size":9252,"mtime":1658639007075,"results":"37","hashOfConfig":"35"},{"size":10610,"mtime":1658641412274,"results":"38","hashOfConfig":"35"},{"size":5155,"mtime":1658224197798,"results":"39","hashOfConfig":"35"},{"size":6266,"mtime":1658244396459,"results":"40","hashOfConfig":"35"},{"size":10253,"mtime":1658383535952,"results":"41","hashOfConfig":"35"},{"size":7854,"mtime":1658382723379,"results":"42","hashOfConfig":"35"},{"size":9943,"mtime":1658401395849,"results":"43","hashOfConfig":"35"},{"size":10327,"mtime":1658391205265,"results":"44","hashOfConfig":"35"},{"size":7648,"mtime":1658382159665,"results":"45","hashOfConfig":"35"},{"size":395,"mtime":1658214970194,"results":"46","hashOfConfig":"35"},{"size":290,"mtime":1658214990287,"results":"47","hashOfConfig":"35"},{"size":493,"mtime":1650460934077,"results":"48","hashOfConfig":"35"},{"size":2379,"mtime":1658641873323,"results":"49","hashOfConfig":"35"},{"size":1812,"mtime":1650804733497,"results":"50","hashOfConfig":"35"},{"size":5911,"mtime":1658417415400,"results":"51","hashOfConfig":"35"},{"size":6148,"mtime":1658402215289,"results":"52","hashOfConfig":"35"},{"size":291,"mtime":1658225192364,"results":"53","hashOfConfig":"35"},{"size":375,"mtime":1658647314020,"results":"54","hashOfConfig":"35"},{"size":495,"mtime":1645280737812,"results":"55","hashOfConfig":"35"},{"size":2779,"mtime":1658222774749,"results":"56","hashOfConfig":"35"},{"size":503,"mtime":1644428320620,"results":"57","hashOfConfig":"35"},{"size":108,"mtime":1645362857225,"results":"58","hashOfConfig":"35"},{"size":268,"mtime":1645363693708,"results":"59","hashOfConfig":"35"},{"size":2013,"mtime":1650555443488,"results":"60","hashOfConfig":"35"},{"size":186,"mtime":1650618068963,"results":"61","hashOfConfig":"35"},{"size":4067,"mtime":1658650182402,"results":"62","hashOfConfig":"35"},{"size":4362,"mtime":1658397880387,"results":"63","hashOfConfig":"35"},{"size":1567,"mtime":1651081638198,"results":"64","hashOfConfig":"35"},{"size":102,"mtime":1658244192417,"results":"65","hashOfConfig":"35"},{"size":831,"mtime":1658225564667,"results":"66","hashOfConfig":"35"},{"size":2320,"mtime":1658669083805,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5wgb5n",{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},"H:\\node\\quran\\pages\\admin\\dashboard.js",[],[],"H:\\node\\quran\\pages\\admin\\dua\\add-new.js",[],[],"H:\\node\\quran\\pages\\admin\\dua\\index.js",["180"],[],"import Head from 'next/head';\r\nimport Layout from '../../../components/admin/layouts/Layout';\r\nimport Link from 'next/link';\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {withIronSessionSsr} from \"iron-session/next\";\r\nimport session from \"../../../utils/session\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\nimport $ from \"jquery\";\r\nimport TableSkeleton from \"../../../components/TableSkeleton\";\r\n\r\nexport default function DuaList({user}) {\r\n    const [duas, setDuas] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n\r\n    async function getDuas() {\r\n        try {\r\n            const res = await axios.get(\r\n                `${process.env.API_URL}/dua`,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                if (res.data.duas.data) {\r\n                    setDuas(res.data.duas.data);\r\n                } else {\r\n                    setDuas([]);\r\n                }\r\n                if (res.data.duas.links) {\r\n                    setLinks(res.data.duas.links);\r\n                }\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDuas();\r\n    }, [setDuas]);\r\n\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setDuas(res.data.duas.data);\r\n                setLinks(res.data.duas.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/dua/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Manage Dua</title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user}>\r\n                <div className=\"topBar\">\r\n                    <div className=\"content\">\r\n                        <h1 className=\"welcome\">Manage Dua</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"widgetArea\">\r\n                    <div className=\"content\">\r\n                        <Link href=\"/admin/dua/add-new\">\r\n                            <a className=\"btn btn-success\">Add New Dua</a>\r\n                        </Link>\r\n                        <table className=\"table mt-3\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th>SL</th>\r\n                                <th>Bangla Name</th>\r\n                                <th>Arabic Name</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                duas && !loading && (\r\n                                    duas.map((el, index) => (\r\n                                        <tr\r\n                                            key={el.id}\r\n                                            style={{verticalAlign: 'middle'}}\r\n                                            className={`row-id-${el.id}`}\r\n                                        >\r\n                                            <td>{index + 1}</td>\r\n                                            <td>{el.banglaName}</td>\r\n                                            <td dir='rtl' className='text-start'>{el.arabicName}</td>\r\n                                            <td>\r\n                                                <Link\r\n                                                    href={`/admin/dua/${el.id}`}\r\n                                                >\r\n                                                    <a className=\"btn btn-warning btn-sm m-2\">\r\n                                                        Edit\r\n                                                    </a>\r\n                                                </Link>\r\n                                                <Link href=\"#\">\r\n                                                    <a\r\n                                                        className=\"btn btn-danger btn-sm\"\r\n                                                        onClick={(e) => {\r\n                                                            e.preventDefault();\r\n                                                            const result =\r\n                                                                confirm(\r\n                                                                    'Want to delete?'\r\n                                                                );\r\n                                                            if (result) {\r\n                                                                deleteHandler(\r\n                                                                    el.id\r\n                                                                );\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        Delete\r\n                                                    </a>\r\n                                                </Link>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                )|| (\r\n                                    <TableSkeleton tr={3} td={4}/>\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={6}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req}) {\r\n        const session = req.session;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\quran\\pages\\admin\\dua\\[id]\\index.js",["181"],[],"import Layout from '../../../../components/admin/layouts/Layout';\r\nimport Head from 'next/head';\r\nimport axios from 'axios';\r\nimport {withIronSessionSsr} from \"iron-session/next\";\r\nimport session from \"../../../../utils/session\";\r\nimport Skeleton, {SkeletonTheme} from 'react-loading-skeleton';\r\nimport {useEffect, useState} from \"react\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport Loader from \"../../../../components/Loader\";\r\n\r\nexport default function Edit({ user, id }) {\r\n    const [dua, setDua] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [loader, setLoader] = useState(false);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/dua/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setDua(res.data.dua);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoader(true);\r\n        toast.loading('Saving', {\r\n            position: \"bottom-left\",\r\n            theme: 'dark'\r\n        });\r\n        const banglaName = e.target.banglaName.value;\r\n        const arabicName = e.target.arabicName.value;\r\n        const arabicText = e.target.arabicText.value;\r\n        const banglaText = e.target.banglaText.value;\r\n        const type = e.target.type.value;\r\n        try {\r\n            const response = await axios.post('/api/dua/update', {\r\n                banglaName: banglaName,\r\n                arabicName: arabicName,\r\n                banglaText: banglaText,\r\n                arabicText: arabicText,\r\n                type: type,\r\n                id,\r\n            },headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Saved', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error('Something went wrong! Try again', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.statusText, {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Edit Dua</title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user}>\r\n                <div className=\"topBar\">\r\n                    <div className=\"content\">\r\n                        <h1 className=\"welcome\">Edit Dua</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"widgetArea\">\r\n                    <div className=\"content\">\r\n                        <div className=\"formWrapper\">\r\n                            <form\r\n                                onSubmit={handleForm}\r\n                                encType=\"multipart/form-data\"\r\n                            >\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Bangla Name</label>\r\n                                    {\r\n                                        dua && loading === false && (\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                required\r\n                                                name=\"banglaName\"\r\n                                                id=\"banglaName\"\r\n                                                defaultValue={dua.banglaName}\r\n                                            />\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={40}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Arabic Name</label>\r\n                                    {\r\n                                        dua && loading === false && (\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                required\r\n                                                name=\"arabicName\"\r\n                                                id=\"arabicName\"\r\n                                                dir=\"rtl\"\r\n                                                defaultValue={dua.arabicName}\r\n                                            />\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={40}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Dua in Arabic</label>\r\n                                    {\r\n                                        dua && loading === false && (\r\n                                            <textarea name=\"arabicText\" cols=\"30\" rows=\"10\"\r\n                                                      className=\"form-control\" dir='rtl' defaultValue={dua.arabicText}/>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={80}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Dua in Bangla</label>\r\n                                    {\r\n                                        dua && loading === false && (\r\n                                            <textarea name=\"banglaText\" cols=\"30\" rows=\"10\"\r\n                                                      className=\"form-control\" defaultValue={dua.banglaText}/>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={80}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-5\">\r\n                                    <label>Type</label>\r\n                                    {\r\n                                        dua && loading === false && (\r\n                                            <select name=\"type\" className=\"form-control\" defaultValue={dua.type}>\r\n                                                <option value=\"1\">প্রতিদিনের দোয়া</option>\r\n                                                <option value=\"2\">সপ্তাহের দোয়া</option>\r\n                                                <option value=\"3\">বিশেষ দোয়া</option>\r\n                                                <option value=\"4\">প্রসিদ্ধ দোয়া</option>\r\n                                            </select>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={40}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <button\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-success\"\r\n                                    >\r\n                                        Update\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\n\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\quran\\pages\\admin\\index.js",[],[],"H:\\node\\quran\\pages\\admin\\sura\\add-new.js",[],[],"H:\\node\\quran\\pages\\admin\\sura\\index.js",["182"],[],"import Head from 'next/head';\r\nimport Layout from '../../../components/admin/layouts/Layout';\r\nimport Link from 'next/link';\r\nimport React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {withIronSessionSsr} from \"iron-session/next\";\r\nimport session from \"../../../utils/session\";\r\nimport TableSkeleton from \"../../../components/TableSkeleton\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport $ from 'jquery';\r\n\r\nexport default function SuraList({user}) {\r\n    const [suras, setSuras] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n\r\n    async function getSuras() {\r\n        try {\r\n            const res = await axios.get(\r\n                `${process.env.API_URL}/sura`,\r\n                headers\r\n            );\r\n            console.log(res.data.suras);\r\n            if (res.data.status === true) {\r\n                if (res.data.suras.data){\r\n                    setSuras(res.data.suras.data);\r\n                }else {\r\n                    setSuras([]);\r\n                }\r\n                if (res.data.suras.links){\r\n                    setLinks(res.data.suras.links);\r\n                }\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSuras();\r\n    }, [setSuras]);\r\n\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setSuras(res.data.suras.data);\r\n                setLinks(res.data.suras.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/sura/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            console.log(response.data);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Manage Sura</title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user}>\r\n                <div className=\"topBar\">\r\n                    <div className=\"content\">\r\n                        <h1 className=\"welcome\">Manage Sura</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"widgetArea\">\r\n                    <div className=\"content\">\r\n                        <Link href=\"/admin/sura/add-new\">\r\n                            <a className=\"btn btn-success\">Add New Sura</a>\r\n                        </Link>\r\n                        <table className=\"table mt-3\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th width='10%'>SL</th>\r\n                                <th width='30%'>Bangla Name</th>\r\n                                <th width='30%'>Arabic Name</th>\r\n                                <th width='30%'>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                suras && suras.length <= 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={4} className={`text-center`}>No Sura Found</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            {\r\n                                suras && !loading && (\r\n                                    suras.map((el) => (\r\n                                            <tr\r\n                                                key={el.id}\r\n                                                style={{verticalAlign: 'middle'}}\r\n                                                className={`row-id-${el.id}`}\r\n                                            >\r\n                                                <td>{el.serial_no}</td>\r\n                                                <td>{el.bangla_name}</td>\r\n                                                <td dir='rtl' className='text-start'>{el.arabic_name}</td>\r\n                                                <td>\r\n                                                    <Link\r\n                                                        href={`/admin/sura/${el.id}`}\r\n                                                    >\r\n                                                        <a className=\"btn btn-warning btn-sm m-2\">\r\n                                                            Edit\r\n                                                        </a>\r\n                                                    </Link>\r\n                                                    <Link\r\n                                                        href={`/admin/sura/${el.id}/chapter`}\r\n                                                    >\r\n                                                        <a className=\"btn btn-success btn-sm m-2\">\r\n                                                            Manage Chapters\r\n                                                        </a>\r\n                                                    </Link>\r\n                                                    <a\r\n                                                        className=\"btn btn-danger btn-sm\"\r\n                                                        onClick={(e) => {\r\n                                                            e.preventDefault();\r\n                                                            const result =\r\n                                                                confirm(\r\n                                                                    'Want to delete?'\r\n                                                                );\r\n                                                            if (result) {\r\n                                                                deleteHandler(\r\n                                                                    el.id\r\n                                                                );\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        Delete\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    )\r\n                                ) || (\r\n                                    <TableSkeleton tr={3} td={4}/>\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={6}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req}) {\r\n        const session = req.session;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\quran\\pages\\admin\\sura\\[id]\\chapter\\add-new.js",["183"],[],"import {useEffect, useState} from 'react';\r\nimport Head from 'next/head';\r\nimport Layout from '../../../../../components/admin/layouts/Layout';\r\nimport styles from '../../../../../styles/AddNewChapter.module.css';\r\nimport axios from 'axios';\r\nimport $ from 'jquery';\r\nimport dynamic from \"next/dynamic\";\r\nimport {withIronSessionSsr} from \"iron-session/next\";\r\nimport session from \"../../../../../utils/session\";\r\nimport Loader from \"../../../../../components/Loader\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\n\r\nconst JoditEditor = dynamic(\r\n    () => {\r\n        return import(\"jodit-react\");\r\n    },\r\n    {ssr: false}\r\n);\r\nexport default function AddNewChapter({user, id}) {\r\n    const [sura, setSura] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [loader, setLoader] = useState(false);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/sura/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setSura(res.data.sura);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const config = {\r\n        readonly: false,\r\n        height: 400,\r\n    };\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoader(true);\r\n        toast.loading('Saving', {\r\n            position: \"bottom-left\",\r\n            theme: 'dark'\r\n        });\r\n        const arabic = e.target.arabicTitle.value;\r\n        const bangla = e.target.banglaTitle.value;\r\n        const shortTafsil = $('.tafsilShort .jodit-wysiwyg').html();\r\n        const longTafsil = $('.tafsilLong .jodit-wysiwyg').html();\r\n        const serial = e.target.serial.value;\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/chapter/save`, {\r\n                arabic,\r\n                bangla,\r\n                shortTafsil,\r\n                longTafsil,\r\n                serial,\r\n                sura: id\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Saved', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $('form').trigger('reset');\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error('Something went wrong! Try again', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.statusText, {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Add New Chapter In\r\n                    {\r\n                        sura && loading === false && (\r\n                            ' ' + sura.bangla_name\r\n                        )\r\n                    }</title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user}>\r\n                <div className=\"topBar\">\r\n                    <div className=\"content\">\r\n                        <h1 className=\"welcome\">\r\n                            Add New Chapter In\r\n                            {\r\n                                sura && loading === false && (\r\n                                    ' ' + sura.bangla_name\r\n                                )\r\n                            }\r\n                        </h1>\r\n                    </div>\r\n                    <div className=\"widgetArea\">\r\n                        <div className=\"content\">\r\n                            <div className={styles.formWrapper}>\r\n                                <form onSubmit={handleForm} id='form'>\r\n                                    <div className=\"form-group mb-2\">\r\n                                        <label>Arabic</label>\r\n                                        <textarea name=\"arabicTitle\" className=\"form-control\" rows=\"5\"\r\n                                                  dir=\"rtl\"></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-2\">\r\n                                        <label>Bangla</label>\r\n                                        <textarea name=\"banglaTitle\" className=\"form-control\" rows=\"5\"></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-2 tafsilShort\">\r\n                                        <label>Short Tafsil</label>\r\n                                        <JoditEditor\r\n                                            config={config}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group mb-2 tafsilLong\">\r\n                                        <label>Long Tafsil</label>\r\n                                        <JoditEditor\r\n                                            config={config}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group mb-2\">\r\n                                        <label>Chapter Serial Number</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            required\r\n                                            name=\"serial\"\r\n                                            id=\"serial\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group mb-2\">\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-success\"\r\n                                        >\r\n                                            Save\r\n                                        </button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id\r\n            },\r\n        };\r\n    },\r\n    session\r\n);\r\n","H:\\node\\quran\\pages\\admin\\sura\\[id]\\chapter\\index.js",["184"],[],"import Head from 'next/head';\r\nimport Layout from '../../../../../components/admin/layouts/Layout';\r\nimport Link from 'next/link';\r\nimport React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {withIronSessionSsr} from \"iron-session/next\";\r\nimport session from \"../../../../../utils/session\";\r\nimport TableSkeleton from \"../../../../../components/TableSkeleton\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport $ from 'jquery';\r\n\r\nexport default function ChapterList({user, sura}) {\r\n    const [chapters, setChapters] = useState();\r\n    const [links, setLinks] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n\r\n    async function getChapters() {\r\n        try {\r\n            const res = await axios.get(\r\n                `${process.env.API_URL}/${sura}/chapter`,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                if (res.data.chapters.data) {\r\n                    setChapters(res.data.chapters.data);\r\n                } else {\r\n                    setChapters([]);\r\n                }\r\n                if (res.data.chapters.links) {\r\n                    setLinks(res.data.chapters.links);\r\n                }\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getChapters();\r\n    }, [setChapters]);\r\n\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.get(\r\n                url,\r\n                headers\r\n            );\r\n            if (res.data.status === true) {\r\n                setChapters(res.data.suras.data);\r\n                setLinks(res.data.suras.links);\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        toast.loading('Deleting', {\r\n            position: \"bottom-right\",\r\n            theme: 'dark'\r\n        });\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/chapter/delete`, {\r\n                id: id,\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Successfully Deleted', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                $(`.row-id-${id}`).fadeOut();\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error(response.data.error, {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.data.errors, {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Manage {sura.banglaName} Chapters</title>\r\n            </Head>\r\n            <ToastContainer/>\r\n            <Layout user={user}>\r\n                <div className=\"topBar\">\r\n                    <div className=\"content\">\r\n                        <h1 className=\"welcome\">\r\n                            Manage {sura.banglaName} Chapters\r\n                        </h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"widgetArea\">\r\n                    <div className=\"content\">\r\n                        <Link href={`/admin/sura/${sura}/chapter/add-new`}>\r\n                            <a className=\"btn btn-success\">Add New Chapter</a>\r\n                        </Link>\r\n                        <table className=\"table mt-3\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th width=\"10%\">Chapter</th>\r\n                                <th width=\"40%\">Arabic</th>\r\n                                <th width=\"40%\">Bangla</th>\r\n                                <th width=\"10%\">Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                chapters && chapters.length <= 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={4} className={`text-center`}>No Sura Found</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            {\r\n                                chapters && !loading && (\r\n                                    chapters.map((el) => (\r\n                                            <tr\r\n                                                key={el.id}\r\n                                                style={{verticalAlign: 'middle'}}\r\n                                                className={`row-id-${el.id}`}\r\n                                            >\r\n                                                <td>{el.serial}</td>\r\n                                                <td dir='rtl'>{el.arabic}</td>\r\n                                                <td className='text-start'>{el.bangla}</td>\r\n                                                <td>\r\n                                                    <Link\r\n                                                        href={`/admin/sura/${el.sura}/chapter/${el.id}`}\r\n                                                    >\r\n                                                        <a className=\"btn btn-warning btn-sm m-2\">\r\n                                                            Edit\r\n                                                        </a>\r\n                                                    </Link>\r\n                                                    <a\r\n                                                        className=\"btn btn-danger btn-sm\"\r\n                                                        onClick={(e) => {\r\n                                                            e.preventDefault();\r\n                                                            const result =\r\n                                                                confirm(\r\n                                                                    'Want to delete?'\r\n                                                                );\r\n                                                            if (result) {\r\n                                                                deleteHandler(\r\n                                                                    el.id\r\n                                                                );\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        Delete\r\n                                                    </a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    )\r\n                                ) || (\r\n                                    <TableSkeleton tr={3} td={4}/>\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                            <tfoot>\r\n                            <tr>\r\n                                <td colSpan={6}>\r\n                                    <nav className={`float-end`}>\r\n                                        <ul className=\"pagination mt-3\">\r\n                                            {\r\n                                                links.map(el => (\r\n                                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                                        key={el.label}>\r\n                                                        <a className={`page-link`}\r\n                                                           onClick={() => paginate(el.url)}\r\n                                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </nav>\r\n                                </td>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const sura = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                sura\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\quran\\pages\\admin\\sura\\[id]\\chapter\\[chapter].js",["185"],[],"import Layout from '../../../../../components/admin/layouts/Layout';\r\nimport Head from 'next/head';\r\nimport axios from 'axios';\r\nimport dynamic from \"next/dynamic\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport $ from 'jquery';\r\nimport {withIronSessionSsr} from \"iron-session/next\";\r\nimport session from \"../../../../../utils/session\";\r\nimport Loader from \"../../../../../components/Loader\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\n\r\nconst JoditEditor = dynamic(\r\n    () => {\r\n        return import(\"jodit-react\");\r\n    },\r\n    {ssr: false}\r\n);\r\n\r\nexport default function Edit({user, id, sura}) {\r\n    const [chapter, setChapter] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [loader, setLoader] = useState(false);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/chapter/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setChapter(res.data.chapter);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const config = {\r\n        readonly: false,\r\n        height: 400,\r\n    };\r\n\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoader(true);\r\n        toast.loading('Saving', {\r\n            position: \"bottom-left\",\r\n            theme: 'dark'\r\n        });\r\n        const arabic = e.target.arabicTitle.value;\r\n        const bangla = e.target.banglaTitle.value;\r\n        const shortTafsil = $('.tafsilShort .jodit-wysiwyg').html();\r\n        const longTafsil = $('.tafsilLong .jodit-wysiwyg').html();\r\n        const serial = e.target.serial.value;\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/chapter/update`, {\r\n                arabic,\r\n                bangla,\r\n                shortTafsil,\r\n                longTafsil,\r\n                serial,\r\n                sura,\r\n                id\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Saved', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error('Something went wrong! Try again', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.statusText, {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Edit Chapter</title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user}>\r\n                <div className=\"topBar\">\r\n                    <div className=\"content\">\r\n                        <h1 className=\"welcome\">Edit Chapter</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"widgetArea\">\r\n                    <div className=\"content\">\r\n                        <div className=\"formWrapper\">\r\n                            <form\r\n                                onSubmit={handleForm}\r\n                                encType=\"multipart/form-data\"\r\n                            >\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Arabic</label>\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <textarea name=\"arabicTitle\" className=\"form-control\" rows=\"5\" dir=\"rtl\"\r\n                                                      defaultValue={chapter.arabic}></textarea>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={70}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Bangla</label>\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <textarea name=\"banglaTitle\" className=\"form-control\" rows=\"5\"\r\n                                                      defaultValue={chapter.bangla}></textarea>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={70}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2 tafsilShort\">\r\n                                    <label>Short Tafsil</label>\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <JoditEditor\r\n                                                config={config}\r\n                                                value={chapter.shortTafsil}\r\n                                            />\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={100}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2 tafsilLong\">\r\n                                    <label>Long Tafsil</label>\r\n\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <JoditEditor\r\n                                                config={config}\r\n                                                value={chapter.longTafsil2}\r\n                                            />\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={100}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Chapter Serial Number</label>\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                required\r\n                                                name=\"serial\"\r\n                                                id=\"serial\"\r\n                                                defaultValue={chapter.serial}\r\n                                            />\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={40}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <button\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-success\"\r\n                                    >\r\n                                        Update\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const sura = params.id;\r\n        const id = params.chapter;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id,\r\n                sura\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\quran\\pages\\admin\\sura\\[id]\\index.js",["186"],[],"import Layout from '../../../../components/admin/layouts/Layout';\r\nimport Head from 'next/head';\r\nimport axios from 'axios';\r\nimport {withIronSessionSsr} from \"iron-session/next\";\r\nimport session from \"../../../../utils/session\";\r\nimport Skeleton, {SkeletonTheme} from 'react-loading-skeleton';\r\nimport {useEffect, useState} from \"react\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport Loader from \"../../../../components/Loader\";\r\n\r\nexport default function Edit({user, id}) {\r\n    const [sura, setSura] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [loader, setLoader] = useState(false);\r\n    const headers = {\r\n        headers: {Authorization: `Bearer ${user.token}`},\r\n    };\r\n    useEffect(() => {\r\n        axios.get(\r\n            `${process.env.API_URL}/sura/${id}`,\r\n            headers\r\n        ).then(res => {\r\n            if (res.data.status === true) {\r\n                setSura(res.data.sura);\r\n                setLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n    const handleForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoader(true);\r\n        toast.loading('Saving', {\r\n            position: \"bottom-left\",\r\n            theme: 'dark'\r\n        });\r\n        const arabicName = e.target.arabicName.value;\r\n        const banglaName = e.target.banglaName.value;\r\n        const serial = e.target.serial.value;\r\n        try {\r\n            const response = await axios.post(`${process.env.API_URL}/sura/update`, {\r\n                banglaName: banglaName,\r\n                arabicName: arabicName,\r\n                serial_no: serial,\r\n                id\r\n            }, headers);\r\n            if (response.data.status === true) {\r\n                toast.dismiss();\r\n                toast.success('Saved', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            } else {\r\n                toast.dismiss();\r\n                toast.error('Something went wrong! Try again', {\r\n                    position: \"bottom-left\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: 'dark',\r\n                });\r\n                setLoader(false);\r\n            }\r\n        } catch (err) {\r\n            toast.dismiss();\r\n            toast.error(err.response.statusText, {\r\n                position: \"bottom-left\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: 'dark',\r\n            });\r\n            setLoader(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Edit Sura</title>\r\n            </Head>\r\n            {\r\n                loader && loader === true && (\r\n                    <Loader/>\r\n                )\r\n            }\r\n            <ToastContainer/>\r\n            <Layout user={user}>\r\n                <div className=\"topBar\">\r\n                    <div className=\"content\">\r\n                        <h1 className=\"welcome\">Edit Sura</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"widgetArea\">\r\n                    <div className=\"content\">\r\n                        <div className=\"formWrapper\">\r\n                            <form\r\n                                onSubmit={handleForm}\r\n                                encType=\"multipart/form-data\"\r\n                            >\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Bangla Name</label>\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <input type=\"text\" className={`form-control`} name=\"banglaName\" required\r\n                                                   defaultValue={sura.bangla_name}/>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={40}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Arabic Name</label>\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <input type=\"text\" className={`form-control`} name=\"arabicName\" required\r\n                                                   defaultValue={sura.arabic_name} dir='rtl'/>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={40}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <label>Sura Serial Number</label>\r\n                                    {\r\n                                        sura && loading === false && (\r\n                                            <input type=\"text\" className={`form-control`} name=\"serial\" required\r\n                                                   defaultValue={sura.serial_no} dir='rtl'/>\r\n                                        ) || (\r\n                                            <SkeletonTheme baseColor=\"#ffffff\" highlightColor=\"#F1F5F9\">\r\n                                                <Skeleton width={`100%`} height={40}/>\r\n                                            </SkeletonTheme>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group mb-2\">\r\n                                    <button\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-success\"\r\n                                    >\r\n                                        Update\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\n\r\nexport const getServerSideProps = withIronSessionSsr(\r\n    async function getServerSideProps({req, params}) {\r\n        const session = req.session;\r\n        const id = params.id;\r\n        if (!session.user) {\r\n            return {\r\n                redirect: {\r\n                    destination: `/admin`,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            props: {\r\n                user: session.user,\r\n                id\r\n            },\r\n        };\r\n    },\r\n    session\r\n);","H:\\node\\quran\\pages\\api\\auth\\login.js",[],[],"H:\\node\\quran\\pages\\api\\auth\\logout.js",[],[],"H:\\node\\quran\\pages\\coming-soon.js",["187"],[],"import Head from \"next/head\";\r\nimport Image from 'next/image'\r\n\r\nexport default function ComingSoon() {\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Coming Soon</title>\r\n            </Head>\r\n            <div style={{'width' : '100px', 'margin' : '60px auto'}}>\r\n                <Image src='/logo.jpg' width={100} height={100}/>\r\n            </div>\r\n            <h1 style={{'textAlign': 'center'}}>\r\n                Coming Soon\r\n            </h1>\r\n        </>\r\n    )\r\n}","H:\\node\\quran\\pages\\index.js",[],[],"H:\\node\\quran\\pages\\main.js",[],[],"H:\\node\\quran\\pages\\search.js",["188"],[],"import Head from \"next/head\";\r\nimport Header from \"../components/frontend/layouts/Header\";\r\nimport Page from '../components/frontend/layouts/Page';\r\nimport styles from '../styles/Search.module.css';\r\nimport {toArabic} from 'arabic-digits';\r\nimport Link from \"next/link\";\r\nimport axios from \"axios\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\n\r\nexport default function Search({keyword}) {\r\n    const [results, setResults] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [links, setLinks] = useState([]);\r\n\r\n    async function getResults() {\r\n        try {\r\n            const res = await axios.post(\r\n                `${process.env.API_URL}/search/chapters`,\r\n                {keyword}\r\n            );\r\n            if (res.data.status === true) {\r\n                if (res.data.chapters.data) {\r\n                    setResults(res.data.chapters.data);\r\n                    setLoading(false);\r\n                }\r\n                if (res.data.suras.links){\r\n                    setLinks(res.data.suras.links);\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getResults();\r\n    }, [setResults]);\r\n\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.post(\r\n                url,\r\n                {\r\n                    keyword\r\n                }\r\n            );\r\n            if (res.data.chapters.data) {\r\n                setResults(res.data.chapters.data);\r\n                setLoading(false);\r\n            }\r\n            if (res.data.suras.links){\r\n                setLinks(res.data.suras.links);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>جستجوی قرآن: {keyword}</title>\r\n            </Head>\r\n            <Header/>\r\n            <div className=\"container\">\r\n                <Page>\r\n                    <form action={`/search`} method={`get`}>\r\n                        <div className=\"row justify-content-around\">\r\n                            <div className=\"col-6\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-8\">\r\n                                        <input type=\"text\" defaultValue={keyword} className={`form-control`}\r\n                                               name={`keyword`}/>\r\n                                    </div>\r\n                                    <input type=\"hidden\" name='page' defaultValue={0}/>\r\n                                    <div className=\"col-4\">\r\n                                        <button className={`btn btn-dark`} type={`submit`}>جستجو</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    {\r\n                        results && !loading &&(\r\n                            <div className={styles.totalWrapper}>\r\n                                نتیجه {toArabic(results.length)}\r\n                            </div>\r\n                        ) || (\r\n                            <SkeletonTheme baseColor=\"#dddddd\" highlightColor=\"#F1F5F9\">\r\n                                <Skeleton width={`100%`} height={40} count={10} style={{marginBottom: 30}}/>\r\n                            </SkeletonTheme>\r\n                        )\r\n                    }\r\n                    <div className={styles.results}>\r\n                        {\r\n                            results && !loading &&(\r\n                                results.map((el) => (\r\n                                    <div key={el.id} className={styles.item}>\r\n                                        <Link href={`#`}>\r\n                                            <a>\r\n                                                {toArabic(el.serial_no)}. سوره {toArabic(el.serial)},\r\n                                                آیه {toArabic(el.serial)}\r\n                                            </a>\r\n                                        </Link>\r\n                                        <p className={styles.chapter}>\r\n                                            {el.arabic}\r\n                                        </p>\r\n                                        <p>{keyword}</p>\r\n                                    </div>\r\n                                ))\r\n                            ) || (\r\n                                <SkeletonTheme baseColor=\"#dddddd\" highlightColor=\"#F1F5F9\">\r\n                                    <Skeleton width={`100%`} height={40} count={10} style={{marginBottom: 30}}/>\r\n                                </SkeletonTheme>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <nav>\r\n                        <ul className=\"pagination mt-3\">\r\n                            {\r\n                                links.map(el => (\r\n                                    <li className={`page-item ${el.active === true ? 'active' : ''}`}\r\n                                        key={el.label}>\r\n                                        <a className={`page-link`}\r\n                                           onClick={() => paginate(el.url)}\r\n                                           dangerouslySetInnerHTML={{__html: el.label}}/>\r\n                                    </li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    </nav>\r\n                </Page>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport async function getServerSideProps({query}) {\r\n    const keyword = query.keyword;\r\n    return {\r\n        props: {\r\n            keyword\r\n        },\r\n    };\r\n}","H:\\node\\quran\\pages\\sura.js",["189"],[],"import Head from \"next/head\";\r\nimport Header from \"../components/frontend/layouts/Header\";\r\nimport Page from '../components/frontend/layouts/Page';\r\nimport {toArabic} from 'arabic-digits';\r\nimport axios from \"axios\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\n\r\nexport default function Sura({sura, chapter}) {\r\n    const [chapters, setChapters] = useState();\r\n    const [nextPage, setNextPage] = useState(null);\r\n    const [previousPage, setPreviousPage] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    async function getChapters() {\r\n        try {\r\n            const res = await axios.post(\r\n                `${process.env.API_URL}/frontend/chapters`, {\r\n                    sura, chapter\r\n                }\r\n            );\r\n            if (res.data.status === true) {\r\n                if (res.data.chapters.data) {\r\n                    setChapters(res.data.chapters.data);\r\n                    setLoading(false);\r\n                }\r\n                if (res.data.chapters.next_page_url) {\r\n                    setNextPage(res.data.chapters.next_page_url);\r\n                } else {\r\n                    setNextPage(null);\r\n                }\r\n                if (res.data.chapters.prev_page_url) {\r\n                    setPreviousPage(res.data.chapters.prev_page_url);\r\n                } else {\r\n                    setPreviousPage(null);\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getChapters();\r\n    }, [setChapters]);\r\n\r\n    const paginate = async (url) => {\r\n        setLoading(true);\r\n        try {\r\n            const res = await axios.post(\r\n                url, {\r\n                    sura, chapter\r\n                }\r\n            );\r\n            if (res.data.status === true) {\r\n                setChapters(res.data.chapters.data);\r\n                setLoading(false);\r\n            }\r\n            if (res.data.chapters.next_page_url) {\r\n                setNextPage(res.data.chapters.next_page_url);\r\n            } else {\r\n                setNextPage(null);\r\n            }\r\n            if (res.data.chapters.prev_page_url) {\r\n                setPreviousPage(res.data.chapters.prev_page_url);\r\n            } else {\r\n                setPreviousPage(null);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Almunji</title>\r\n            </Head>\r\n            <Header/>\r\n            <div className=\"container\">\r\n                <Page>\r\n                    {\r\n                        chapters && !loading && (\r\n                            chapters.map((el) => (\r\n                                <div key={el.id} className={`row mb-5`}>\r\n                                    <div className=\"col-md-3\">\r\n                                        <p className={`font-size-26`}>\r\n                                            {el.arabic}\r\n                                            <span className={`serial`}> ﴿{toArabic(el.serial)}﴾</span>\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"col-md-3\" dir='ltr'>\r\n                                        <p>\r\n                                            {el.bangla} <span className={`serial`}>({el.serial})</span>\r\n                                        </p>\r\n                                    </div>\r\n                                    {\r\n                                        el.shortTafsil && (\r\n                                            <div className=\"col-md-3\" dir='ltr'>\r\n                                                <p>\r\n                                                    {el.shortTafsil} <span className={`serial`}>({el.serial})</span>\r\n                                                </p>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                    {\r\n                                        el.longTafsil && (\r\n                                            <div className=\"col-md-3\" dir='ltr'>\r\n                                                <p>\r\n                                                    {el.longTafsil} <span className={`serial`}>({el.serial})</span>\r\n                                                </p>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        ) || (\r\n                            <SkeletonTheme baseColor=\"#dddddd\" highlightColor=\"#F1F5F9\">\r\n                                <Skeleton width={`100%`} height={40} count={10} style={{marginBottom: 30}}/>\r\n                            </SkeletonTheme>\r\n                        )\r\n                    }\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-md-3 text-center\">\r\n                            <a className={`btn btn-lg btn-primary mb-5 ${!nextPage ? 'disabled' : ''}`}\r\n                               onClick={() => paginate(nextPage)}\r\n                               dangerouslySetInnerHTML={{__html: 'صفحه بعد>>'}} dir={'ltr'}/>\r\n                        </div>\r\n                        <div className=\"col-md-3 text-center\">\r\n                            <a className={`btn btn-lg btn-primary mb-5 ${!previousPage ? 'disabled' : ''}`}\r\n                               onClick={() => paginate(previousPage)}\r\n                               dangerouslySetInnerHTML={{__html: '<<صفحه قبل'}} dir={'ltr'}/>\r\n                        </div>\r\n                    </div>\r\n                </Page>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport async function getServerSideProps({query}) {\r\n    const sura = query.sura;\r\n    const chapter = query.chapter;\r\n    return {\r\n        props: {\r\n            sura,\r\n            chapter\r\n        },\r\n    };\r\n}","H:\\node\\quran\\pages\\_app.js",[],[],"H:\\node\\quran\\pages\\_document.js",[],[],"H:\\node\\quran\\components\\admin\\layouts\\Layout.js",[],[],"H:\\node\\quran\\components\\admin\\layouts\\Sidebar.js",[],[],"H:\\node\\quran\\components\\CustomImage.js",[],[],"H:\\node\\quran\\components\\frontend\\layouts\\Footer.js",[],[],"H:\\node\\quran\\components\\frontend\\layouts\\FrontLayout.js",[],[],"H:\\node\\quran\\components\\frontend\\layouts\\Header.js",["190"],[],"import React from 'react'\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\nimport styles from './Header.module.css';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <>\r\n            <div className={`container ${styles.header}`}>\r\n                <div className=\"row align-items-center justify-content-end\">\r\n                    <div className=\"col\">\r\n                        <Link href={`/`}>\r\n                            <a>\r\n                                বাংলা\r\n                            </a>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Link href={`/`}>\r\n                            <a>\r\n                                مقالات\r\n                            </a>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Link href={`/`}>\r\n                            <a>\r\n                                مقالات\r\n                            </a>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Link href={`/`}>\r\n                            <a>\r\n                                فهرست قرآن\r\n                            </a>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Link href={`/`}>\r\n                            <a>\r\n                                صفحه اول\r\n                            </a>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Link href={`/`}>\r\n                            <a>\r\n                                <Image src='/logo.jpg' width={100} height={100}/>\r\n                            </a>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","H:\\node\\quran\\components\\frontend\\layouts\\Page.js",[],[],"H:\\node\\quran\\components\\frontend\\SearchByDua.js",[],[],"H:\\node\\quran\\components\\frontend\\SearchBySura.js",["191"],[],"import React from 'react';\r\nimport styles from './SearchBySura.module.css';\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {toArabic} from 'arabic-digits';\r\nimport $ from 'jquery';\r\n\r\nexport default function SearchBySura() {\r\n    const [suras, setSuras] = useState();\r\n    const [chapters, setChapters] = useState();\r\n\r\n    async function getSuras() {\r\n        try {\r\n            const res = await axios.get(\r\n                `${process.env.API_URL}/sura?allData=true`\r\n            );\r\n            if (res.data.status === true) {\r\n                setSuras(res.data.suras);\r\n                getChapters(1);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSuras();\r\n    }, [setSuras]);\r\n\r\n    async function getChapters(sura) {\r\n        try {\r\n            const res = await axios.get(\r\n                `${process.env.API_URL}/${sura}/chapter?allData=true`\r\n            );\r\n            if (res.data.status === true) {\r\n                setChapters(res.data.chapters);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const handleSuraChange = () => {\r\n        const sura = $('.sura').val();\r\n        getChapters(sura);\r\n    }\r\n    return (\r\n        <>\r\n            <div className={styles.searchBoxTitle}> متن قرآن</div>\r\n            <div className={styles.searchFieldWrapper}>\r\n                <form action={`/sura`} method={`get`}>\r\n                    <div className=\"row align-items-center\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"row align-items-center mb-3\">\r\n                                <label className=\"col-md-2 col-form-label\">\r\n                                    سوره:\r\n                                </label>\r\n                                <div className=\"col-md-10\">\r\n                                    <select name=\"sura\" className={`form-control ${styles.dropdown} sura`}\r\n                                            onChange={handleSuraChange}>\r\n                                        {\r\n                                            suras && (\r\n                                                suras.map((el) => (\r\n                                                    <option value={el.id} key={el.id}>\r\n                                                        {toArabic(el.serial_no)}. {el.arabic_name}\r\n                                                    </option>\r\n                                                ))\r\n                                            )\r\n                                        }\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row align-items-center mb-3\">\r\n                                <label className=\"col-md-2 col-form-label\">\r\n                                    آيه:\r\n                                </label>\r\n                                <div className=\"col-md-10\">\r\n                                    <select name=\"chapter\" className={`form-control ${styles.dropdown}`}>\r\n                                        {\r\n                                            chapters && (\r\n                                                chapters.map((el) => (\r\n                                                    <option value={el.serial} key={el.id}>\r\n                                                        {toArabic(el.serial)}\r\n                                                    </option>\r\n                                                ))\r\n                                            )\r\n                                        }\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row align-items-center\">\r\n                                <div className=\"col-md-2\"/>\r\n                                <div className=\"col-md-10\">\r\n                                    <button className={`btn btn-dark`} type={`submit`}>جستجو</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","H:\\node\\quran\\components\\frontend\\SearchByText.js",[],[],"H:\\node\\quran\\components\\Loader.js",[],[],"H:\\node\\quran\\components\\TableSkeleton.js",[],[],"H:\\node\\quran\\pages\\dua.js",["192"],[],"import Head from \"next/head\";\r\nimport Header from \"../components/frontend/layouts/Header\";\r\nimport Page from '../components/frontend/layouts/Page';\r\nimport axios from \"axios\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Skeleton, {SkeletonTheme} from \"react-loading-skeleton\";\r\n\r\nexport default function Dua({id}) {\r\n    const [dua, setDua] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    async function getDua() {\r\n        try {\r\n            const res = await axios.get(\r\n                `${process.env.API_URL}/dua/${id}`);\r\n            if (res.data.status === true) {\r\n                if (res.data.dua) {\r\n                    setDua(res.data.dua);\r\n                    setLoading(false);\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDua();\r\n    }, [setDua]);\r\n\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Almunji</title>\r\n            </Head>\r\n            <Header/>\r\n            <div className=\"container\">\r\n                <Page>\r\n                    {\r\n                        dua && !loading && (\r\n                            <div className={`row mb-5`}>\r\n                                <div className=\"col-md-6\">\r\n                                    <p className={`font-size-26`}>\r\n                                        {dua.arabicText}\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"col-md-6\" dir='ltr'>\r\n                                    <p>\r\n                                        {dua.banglaText}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        ) || (\r\n                            <SkeletonTheme baseColor=\"#dddddd\" highlightColor=\"#F1F5F9\">\r\n                                <Skeleton width={`100%`} height={40} count={10} style={{marginBottom: 30}}/>\r\n                            </SkeletonTheme>\r\n                        )\r\n                    }\r\n                </Page>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport async function getServerSideProps({query}) {\r\n    const id = query.id;\r\n    return {\r\n        props: {\r\n            id\r\n        },\r\n    };\r\n}",{"ruleId":"193","severity":1,"message":"194","line":44,"column":8,"nodeType":"195","endLine":44,"endColumn":17,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":30,"column":8,"nodeType":"195","endLine":30,"endColumn":10,"suggestions":"198"},{"ruleId":"193","severity":1,"message":"199","line":45,"column":8,"nodeType":"195","endLine":45,"endColumn":18,"suggestions":"200"},{"ruleId":"193","severity":1,"message":"197","line":38,"column":8,"nodeType":"195","endLine":38,"endColumn":10,"suggestions":"201"},{"ruleId":"193","severity":1,"message":"202","line":44,"column":8,"nodeType":"195","endLine":44,"endColumn":21,"suggestions":"203"},{"ruleId":"193","severity":1,"message":"197","line":39,"column":8,"nodeType":"195","endLine":39,"endColumn":10,"suggestions":"204"},{"ruleId":"193","severity":1,"message":"197","line":30,"column":8,"nodeType":"195","endLine":30,"endColumn":10,"suggestions":"205"},{"ruleId":"206","severity":1,"message":"207","line":11,"column":17,"nodeType":"208","endLine":11,"endColumn":66},{"ruleId":"193","severity":1,"message":"209","line":37,"column":8,"nodeType":"195","endLine":37,"endColumn":20,"suggestions":"210"},{"ruleId":"193","severity":1,"message":"202","line":45,"column":8,"nodeType":"195","endLine":45,"endColumn":21,"suggestions":"211"},{"ruleId":"206","severity":1,"message":"207","line":49,"column":33,"nodeType":"208","endLine":49,"endColumn":82},{"ruleId":"193","severity":1,"message":"199","line":28,"column":8,"nodeType":"195","endLine":28,"endColumn":18,"suggestions":"212"},{"ruleId":"193","severity":1,"message":"213","line":29,"column":8,"nodeType":"195","endLine":29,"endColumn":16,"suggestions":"214"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDuas'. Either include it or remove the dependency array.","ArrayExpression",["215"],"React Hook useEffect has missing dependencies: 'headers' and 'id'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has a missing dependency: 'getSuras'. Either include it or remove the dependency array.",["217"],["218"],"React Hook useEffect has a missing dependency: 'getChapters'. Either include it or remove the dependency array.",["219"],["220"],["221"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getResults'. Either include it or remove the dependency array.",["222"],["223"],["224"],"React Hook useEffect has a missing dependency: 'getDua'. Either include it or remove the dependency array.",["225"],{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"228","fix":"232"},{"desc":"233","fix":"234"},{"desc":"228","fix":"235"},{"desc":"228","fix":"236"},{"desc":"237","fix":"238"},{"desc":"233","fix":"239"},{"desc":"230","fix":"240"},{"desc":"241","fix":"242"},"Update the dependencies array to be: [getDuas, setDuas]",{"range":"243","text":"244"},"Update the dependencies array to be: [headers, id]",{"range":"245","text":"246"},"Update the dependencies array to be: [getSuras, setSuras]",{"range":"247","text":"248"},{"range":"249","text":"246"},"Update the dependencies array to be: [getChapters, setChapters]",{"range":"250","text":"251"},{"range":"252","text":"246"},{"range":"253","text":"246"},"Update the dependencies array to be: [getResults, setResults]",{"range":"254","text":"255"},{"range":"256","text":"251"},{"range":"257","text":"248"},"Update the dependencies array to be: [getDua, setDua]",{"range":"258","text":"259"},[1411,1420],"[getDuas, setDuas]",[1077,1079],"[headers, id]",[1462,1472],"[getSuras, setSuras]",[1277,1279],[1491,1504],"[getChapters, setChapters]",[1293,1295],[1080,1082],[1262,1274],"[getResults, setResults]",[1599,1612],[782,792],[883,891],"[getDua, setDua]"]